#
# NOTE:
# THIS DOCKERFILE IS GENERATED VIA "update.sh".
# PLEASE DO NOT EDIT IT DIRECTLY!
# CHECK README FOR MORE INFO.
#
FROM node:20.19.2-bookworm-slim

LABEL maintainer="Lubomir Stanko <lubomir.stanko@petitpress.sk>"

# ----------------------------------------------------------------------------------------------------------------------
# ENVIRONMENT VARIABLES
# ----------------------------------------------------------------------------------------------------------------------
# Common environment variables
ENV CONFIG_OWNER_NAME=node \
    CONFIG_GROUP_NAME=node \
    CONTAINER_STOP_LOG_FILE="/var/www/html/var/log/container_stop.log" \
    COREPACK_HOME="/usr/lib/node/corepack" \
    COREPACK_ENABLE_DOWNLOAD_PROMPT=0 \
    MAIN_TERMINATED_FILE="/var/www/html/var/log/main-terminated" \
    NPM_CONFIG_LOGLEVEL=notice \
    YARN_CACHE_FOLDER="/var/cache/yarn" \
    YARN_ENABLE_TELEMETRY=0 \
    # Unset yarn version - it could break CI and we don't need it
    YARN_VERSION=
# Packages
ENV RUN_DEPS="ca-certificates \
              curl \
              g++ \
              gcc \
              gettext-base \
              git \
              gnupg \
              less \
              logrotate \
              lsb-release \
              make \
              openssh-client \
              procps \
              vim \
              wget"

# ----------------------------------------------------------------------------------------------------------------------
# PACKAGES
# ----------------------------------------------------------------------------------------------------------------------
RUN apt-get update && \
    APT_SUPERVISOR_VERSION=$(apt-cache madison supervisor | awk -v ver="4.2.5" '$3 ~ ver {print $3; exit}') && \
    apt-get install -y \
        ${RUN_DEPS} \
        supervisor=${APT_SUPERVISOR_VERSION} && \
# Cleanup
    apt-get clean && \
	rm -rf /var/lib/apt/lists/*

# ----------------------------------------------------------------------------------------------------------------------
# NPM
# Install static npm version
# ----------------------------------------------------------------------------------------------------------------------
RUN npm install --location=global npm@latest && \
    npm install --location=global auditjs@latest && \
    mkdir -p ${COREPACK_HOME} && \
    corepack prepare yarn@stable --activate && \
    corepack enable && \
# Node cache cleanup
    npm cache clean --force && \
    yarn cache clean --all

# ----------------------------------------------------------------------------------------------------------------------
# USER SETUP
# ----------------------------------------------------------------------------------------------------------------------
RUN sed -i 's/^#alias l/alias l/g' /home/node/.bashrc && \
    echo "update-notifier=false" > /home/node/.npmrc && \
    mkdir -p \
        ${YARN_CACHE_FOLDER} \
        /usr/local/lib/node_modules \
        /var/run/supervisor \
        /var/www/html/var && \
    chown node:node -R \
        ${COREPACK_HOME} \
        ${YARN_CACHE_FOLDER} \
        /home/node/.npmrc \
        /usr/local/bin \
        /usr/local/lib/node_modules \
        /var/run/supervisor \
        /var/www/html

##<autogenerated>##
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NGINX SETUP START
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ----------------------------------------------------------------------------------------------------------------------
# NGINX ENVIRONMENT VARIABLES
ENV NGINX_ACCESS_LOG="/var/log/nginx/access.log main" \
    NGINX_ACCESS_LOG_HEALTHCHECK_ENABLED="0" \
    NGINX_API_LOCATION=/api \
    NGINX_API_V1_LOCATION=/api/v1 \
    NGINX_API_X_ROBOTS_TAG="noindex, nofollow, noarchive, nosnippet" \
    NGINX_CLIENT_MAX_BODY_SIZE=1m \
    NGINX_DOCUMENTS_X_ROBOTS_TAG="noindex, nofollow, noarchive, nosnippet" \
    NGINX_ERROR_LOG="/var/log/nginx/error.log warn" \
    NGINX_HTML_X_ROBOTS_TAG="noindex, nofollow, noarchive, nosnippet" \
    NGINX_KEEPALIVE_REQUESTS=10000 \
    NGINX_KEEPALIVE_TIMEOUT=650 \
    NGINX_LARGE_CLIENT_HEADER_BUFFERS_SIZE=16k \
    NGINX_PORT=8080 \
    NGINX_PROXYPASS_CONFIG=false \
    NGINX_ROOT=/var/www/html/public \
    NGINX_SERVER_TOKENS="off" \
    NGINX_STATIC_CACHE_CONTROL_HEADER="public, max-age=31557600, s-maxage=31557600" \
    NGINX_STATIC_X_CACHE_CONTROL_TTL_HEADER="604800" \
    NGINX_STATIC_X_ROBOTS_TAG="noindex, nofollow, noarchive, nosnippet" \
    NGINX_UPSTREAM_API_PORT=8085 \
    NGINX_UPSTREAM_API_V1_PORT=8285 \
    NGINX_UPSTREAM_WEBSOCKET_PORT=3005 \
    NGINX_WEBSOCKET_LOCATION=/ws \
    NGINX_WEBSOCKET_X_ROBOTS_TAG="noindex, nofollow, noarchive, nosnippet" \
    NGINX_WORKER_CONNECTIONS=1024 \
    NGINX_WORKER_PROCESSES=1 \
    NGINX_WORKER_RLIMIT_NOFILE=65535 \
    NGINX_X_CONTENT_TYPE_OPTIONS="nosniff" \
    NGINX_X_XSS_PROTECTION="1; mode=block"

# ----------------------------------------------------------------------------------------------------------------------
# NGINX
RUN DEBIAN_FRONTEND=noninteractive && \
    NGINX_KEYRING=/usr/share/keyrings/nginx-archive-keyring.gpg && \
    NGINX_REPO="$(lsb_release -c -s) nginx" && \
    curl -fsSL https://nginx.org/keys/nginx_signing.key | gpg --dearmor -o ${NGINX_KEYRING} && \
    echo "deb [signed-by=${NGINX_KEYRING}] http://nginx.org/packages/debian ${NGINX_REPO}" > /etc/apt/sources.list.d/nginx.list && \
    apt-get update && \
    APT_NGINX_VERSION=$(apt-cache madison nginx | awk -v ver="1.28.0" '$3 ~ ver {print $3; exit}') && \
    APT_NGINX_MODULE_GEOIP_VERSION=$(apt-cache madison nginx-module-geoip | awk -v ver="1.28.0" '$3 ~ ver {print $3; exit}') && \
    APT_NGINX_MODULE_IMAGE_FILTER_VERSION=$(apt-cache madison nginx-module-image-filter | awk -v ver="1.28.0" '$3 ~ ver {print $3; exit}') && \
    APT_NGINX_MODULE_NJS_VERSION=$(apt-cache madison nginx-module-njs | awk -v ver="1.28.0" '$3 ~ ver {print $3; exit}') && \
    APT_NGINX_MODULE_XSLT_VERSION=$(apt-cache madison nginx-module-xslt | awk -v ver="1.28.0" '$3 ~ ver {print $3; exit}') && \
    apt-get install --no-install-recommends --no-install-suggests -y \
        nginx=${APT_NGINX_VERSION} \
        nginx-module-geoip=${APT_NGINX_MODULE_GEOIP_VERSION} \
        nginx-module-image-filter=${APT_NGINX_MODULE_IMAGE_FILTER_VERSION} \
        nginx-module-njs=${APT_NGINX_MODULE_NJS_VERSION} \
        nginx-module-xslt=${APT_NGINX_MODULE_XSLT_VERSION} && \
# Cleanup
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# ----------------------------------------------------------------------------------------------------------------------
# NGINX LOGGING AND USER SETUP
# Create PID folders and forward nginx logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log && \
    mkdir -p \
        /run/nginx && \
    chown node:node -R \
        /etc/nginx \
        /run/nginx \
        /var/log/nginx
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NGINX SETUP END
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# BROWSERS SETUP START
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ----------------------------------------------------------------------------------------------------------------------
ENV DBUS_SESSION_BUS_ADDRESS=/dev/null
# Install Needed packages
RUN apt-get update && \
    apt-get install --no-install-recommends -y \
        bzip2 \
        dbus-x11 \
        fonts-liberation \
        libasound2 \
        libgbm-dev \
        libgbm1 \
        libgconf-2-4 \
        libgtk-3-0 \
        libgtk2.0-0 \
        libnotify-dev \
        libnss3 \
        libu2f-udev \
        libxkbcommon0 \
        libxss1 \
        libxtst6 \
        xauth \
        xdg-utils \
        xvfb \
        xz-utils && \
# Cleanup
    apt-get clean && \
    rm -r /var/lib/apt/lists/*
# Install Google Chrome
RUN wget -q -O /usr/src/google-chrome-stable_current_amd64.deb "https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_136.0.7103.113-1_amd64.deb" && \
    apt-get update && \
    dpkg -i /usr/src/google-chrome-stable_current_amd64.deb ; \
    apt-get install -f -y && \
    rm -f /usr/src/google-chrome-stable_current_amd64.deb && \
# Cleanup
    apt-get clean && \
    rm -r /var/lib/apt/lists/*
# Install Firefox
RUN wget -q -O /tmp/firefox.tar.xz "https://download-installer.cdn.mozilla.net/pub/firefox/releases/138.0.3/linux-x86_64/en-US/firefox-138.0.3.tar.xz" && \
    tar -C /opt -xJf /tmp/firefox.tar.xz && \
    ln -fs /opt/firefox/firefox /usr/bin/firefox && \
# Cleanup
    rm -f /tmp/firefox.tar.xz
# Versions of local tools
RUN echo "node version:    $(node -v) \n" \
         "npm version:     $(npm -v) \n" \
         "yarn version:    $(yarn -v) \n" \
         "debian version:  $(cat /etc/debian_version) \n" \
         "Chrome version:  $(google-chrome --version) \n" \
         "Firefox version: $(firefox --version) \n" \
         "git version:     $(git --version) \n" \
         "whoami:          $(whoami) \n"
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# BROWSERS SETUP END
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##</autogenerated>##

# ----------------------------------------------------------------------------------------------------------------------
# RUN CONFIGURATION
# ----------------------------------------------------------------------------------------------------------------------
COPY --chown=${CONFIG_OWNER_NAME}:${CONFIG_GROUP_NAME} ./etc /etc
COPY --chown=${CONFIG_OWNER_NAME}:${CONFIG_GROUP_NAME} ./usr /usr

# ----------------------------------------------------------------------------------------------------------------------
# RUN
# Run setup and entrypoint start
# ----------------------------------------------------------------------------------------------------------------------
WORKDIR /var/www/html

USER node

ENTRYPOINT ["docker-custom-entrypoint"]
